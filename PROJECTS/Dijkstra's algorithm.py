import heapq

def dijkstra(graph, start):
    """
    Dijkstra's algorithm to find the shortest distances from a start node
    to all other nodes in a weighted graph.
    Returns:
        distances: dict with shortest distance to each vertex
        previous: dict to reconstruct shortest path to each vertex
    """
    # Initialize distances with infinity and previous nodes with None
    distances = {vertex: float('infinity') for vertex in graph}
    previous = {vertex: None for vertex in graph}
    distances[start] = 0
    visited = set()

    # Min-heap priority queue
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        # Skip already visited vertices
        if current_vertex in visited:
            continue
        visited.add(current_vertex)

        # Explore neighbors
        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            # Update distance and path if shorter path found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous[neighbor] = current_vertex
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances, previous


def shortest_path(previous, start, target):
    """
    Reconstructs the shortest path from 'start' to 'target'
    using the 'previous' dictionary generated by Dijkstra's algorithm.
    Returns:
        List of vertices representing the shortest path
    """
    path = []
    current = target

    # Trace path backward from target to start
    while current is not None:
        path.append(current)
        current = previous[current]

    # Reverse path to get correct order (start -> target)
    path.reverse()
    return path if path and path[0] == start else []


# ---------------- Example Usage ----------------

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

start_vertex = 'A'
target_vertex = 'D'

# Run Dijkstra's algorithm
distances, previous = dijkstra(graph, start_vertex)

# Display shortest distances from start vertex
for vertex, distance in distances.items():
    print(f"Shortest distance from {start_vertex} to {vertex} is {distance}")

# Display shortest path from start to target
path = shortest_path(previous, start_vertex, target_vertex)
print(f"Shortest path from {start_vertex} to {target_vertex}: {path}")
